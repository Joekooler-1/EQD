import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox

# Function to process each feed file and concatenate all feeds into one DataFrame
def merge_all_feed_files(toronto_path, sydney_path, london_path, chunksize=50000):
    chunk_list = []  # To hold processed chunks for each feed file

    # List of feed files with corresponding location tags
    feed_files = [
        (toronto_path, 'TORONTO'),
        (sydney_path, 'SYDNEY'),
        (london_path, 'LONDON')
    ]
    
    # Process each feed file
    for file_path, tag in feed_files:
        for chunk in pd.read_csv(file_path, encoding='ISO-8859-1', chunksize=chunksize):
            # Standardize column names and ensure 'GBL_BKID' exists
            chunk.columns = chunk.columns.str.strip().str.upper()
            if 'GBL_BKID' not in chunk.columns:
                raise ValueError(f"'GBL_BKID' column not found in file {file_path}. Available columns: {chunk.columns.tolist()}")

            # Add Location column and append chunk
            chunk['Location'] = tag
            chunk_list.append(chunk)
    
    # Concatenate all feed chunks into one DataFrame
    return pd.concat(chunk_list, ignore_index=True)

# Function to load and filter the CDR file
def load_and_filter_cdr_file(cdr_path):
    try:
        cdr_df = pd.read_csv(cdr_path, sep='|', encoding='ISO-8859-1')
    except UnicodeDecodeError:
        cdr_df = pd.read_csv(cdr_path, sep='|', encoding='cp1252')
    
    # Standardize columns and apply filters
    cdr_df.columns = cdr_df.columns.str.strip().str.upper()
    if 'CLIENT_STATUS' not in cdr_df.columns or 'APPLICATION' not in cdr_df.columns:
        raise ValueError("Required columns 'Client_Status' or 'Application' not found in CDR file. Available columns: "
                         f"{cdr_df.columns.tolist()}")
    cdr_df = cdr_df[(cdr_df['CLIENT_STATUS'] == 'ACTIV') & (cdr_df['APPLICATION'] == 'GLOBALBOOK')]
    cdr_df['CLIENT_ARRANGEMENT_SHORT_NAME'] = cdr_df['CLIENT_ARRANGEMENT_SHORT_NAME'].astype(str)
    return cdr_df

# Function to merge the combined feed data with filtered CDR in chunks
def merge_combined_feed_with_cdr(feed_df, cdr_df, chunksize=50000):
    merged_chunks = []
    for chunk in (feed_df[i:i+chunksize] for i in range(0, feed_df.shape[0], chunksize)):
        # Convert 'GBL_BKID' to string for compatibility
        chunk['GBL_BKID'] = chunk['GBL_BKID'].astype(str)
        merged_chunk = pd.merge(chunk, cdr_df, how='left', left_on='GBL_BKID', right_on='CLIENT_ARRANGEMENT_SHORT_NAME')
        merged_chunk = merged_chunk.drop(columns=['CLIENT_ARRANGEMENT_SHORT_NAME'])
        merged_chunks.append(merged_chunk)
    return pd.concat(merged_chunks, ignore_index=True)

# Function to run the full merge process and save the result
def run_merge_and_save(toronto_path, sydney_path, london_path, cdr_path, output_path):
    try:
        # Merge all feed files into one combined DataFrame
        feed_df = merge_all_feed_files(toronto_path, sydney_path, london_path)
        
        # Load and filter the CDR data
        cdr_df = load_and_filter_cdr_file(cdr_path)
        
        # Merge the combined feed data with the filtered CDR data in chunks
        final_data = merge_combined_feed_with_cdr(feed_df, cdr_df)
        
        # Save the final merged DataFrame to an output file
        final_data.to_csv(output_path, index=False, encoding='ISO-8859-1')
        messagebox.showinfo("Success", f"Files have been merged and saved to {output_path}")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

# Setting up the Tkinter GUI
def select_file(entry_widget):
    file_path = filedialog.askopenfilename()
    entry_widget.delete(0, tk.END)
    entry_widget.insert(0, file_path)

def save_file(entry_widget):
    file_path = filedialog.asksaveasfilename(defaultextension=".csv")
    entry_widget.delete(0, tk.END)
    entry_widget.insert(0, file_path)

# Main function to initialize the Tkinter app
def main():
    root = tk.Tk()
    root.title("Feed and CDR Merger")

    tk.Label(root, text="Select Toronto Feed File:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    toronto_entry = tk.Entry(root, width=50)
    toronto_entry.grid(row=0, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(toronto_entry)).grid(row=0, column=2, padx=10, pady=5)

    tk.Label(root, text="Select Sydney Feed File:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    sydney_entry = tk.Entry(root, width=50)
    sydney_entry.grid(row=1, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(sydney_entry)).grid(row=1, column=2, padx=10, pady=5)

    tk.Label(root, text="Select London Feed File:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
    london_entry = tk.Entry(root, width=50)
    london_entry.grid(row=2, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(london_entry)).grid(row=2, column=2, padx=10, pady=5)

    tk.Label(root, text="Select CDR File:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
    cdr_entry = tk.Entry(root, width=50)
    cdr_entry.grid(row=3, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(cdr_entry)).grid(row=3, column=2, padx=10, pady=5)

    tk.Label(root, text="Save Merged Output As:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
    output_entry = tk.Entry(root, width=50)
    output_entry.grid(row=4, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: save_file(output_entry)).grid(row=4, column=2, padx=10, pady=5)

    tk.Button(root, text="Merge Files", command=lambda: run_merge_and_save(
        toronto_entry.get(),
        sydney_entry.get(),
        london_entry.get(),
        cdr_entry.get(),
        output_entry.get()
    )).grid(row=5, column=0, columnspan=3, pady=20)

    root.mainloop()

# Run the application
if __name__ == "__main__":
    main()
