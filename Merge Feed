import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox

# Function to load the CDR file and filter it
def load_and_filter_cdr_file(cdr_path):
    try:
        # Read the CDR file with specified encoding
        cdr_df = pd.read_csv(cdr_path, sep='|', encoding='ISO-8859-1')
    except UnicodeDecodeError:
        # Fallback encoding if initial encoding fails
        cdr_df = pd.read_csv(cdr_path, sep='|', encoding='cp1252')
    
    # Filter the CDR file based on Client_Status and Application columns
    cdr_df = cdr_df[(cdr_df['Client_Status'] == 'ACTIV') & (cdr_df['Application'] == 'GLOBALBOOK')]
    
    # Convert key column to string for merging compatibility
    cdr_df['Client_Arrangement_Short_Name'] = cdr_df['Client_Arrangement_Short_Name'].astype(str)
    return cdr_df

# Function to process each feed file in chunks
def process_feed_file_in_chunks(file_path, tag, remove_header=False, chunksize=50000):
    chunk_list = []  # To hold processed chunks

    # Read the feed file in chunks
    for chunk in pd.read_csv(file_path, encoding='ISO-8859-1', skiprows=1 if remove_header else 0, chunksize=chunksize):
        # Add Location column
        chunk['Location'] = tag
        chunk_list.append(chunk)
    
    # Concatenate all chunks to form the final DataFrame for this feed file
    return pd.concat(chunk_list, ignore_index=True)

# Function to merge feed files in chunks and filter CDR
def merge_feed_with_filtered_cdr_in_chunks(feed_path_list, cdr_path, output_path, chunksize=50000):
    # Load and filter the CDR data
    cdr_df = load_and_filter_cdr_file(cdr_path)
    
    # Process each feed file and merge with filtered CDR in chunks
    merged_chunks = []  # To hold merged chunks
    for file_path, tag, remove_header in feed_path_list:
        # Read each feed file in chunks
        for chunk in pd.read_csv(file_path, encoding='ISO-8859-1', skiprows=1 if remove_header else 0, chunksize=chunksize):
            # Add Location column
            chunk['Location'] = tag
            
            # Convert key column to string
            chunk['GBL_BKID'] = chunk['GBL_BKID'].astype(str)
            
            # Merge chunk with the filtered CDR data
            merged_chunk = pd.merge(chunk, cdr_df, how='left', left_on='GBL_BKID', right_on='Client_Arrangement_Short_Name')
            merged_chunk = merged_chunk.drop(columns=['Client_Arrangement_Short_Name'])
            merged_chunks.append(merged_chunk)
    
    # Concatenate all merged chunks
    final_df = pd.concat(merged_chunks, ignore_index=True)
    return final_df

# Function to run the full merge process and save the result
def run_merge_and_save(toronto_path, sydney_path, london_path, cdr_path, output_path):
    try:
        # List of feed file paths with metadata for processing
        feed_path_list = [
            (toronto_path, 'TORONTO', False),
            (sydney_path, 'SYDNEY', True),
            (london_path, 'LONDON', True)
        ]
        
        # Perform the merge with filtered CDR data in chunks
        final_data = merge_feed_with_filtered_cdr_in_chunks(feed_path_list, cdr_path, output_path)
        
        # Save the final merged DataFrame to an output file
        final_data.to_csv(output_path, index=False, encoding='ISO-8859-1')
        messagebox.showinfo("Success", f"Files have been merged and saved to {output_path}")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

# Setting up the Tkinter GUI
def select_file(entry_widget):
    file_path = filedialog.askopenfilename()  # No file type restriction
    entry_widget.delete(0, tk.END)
    entry_widget.insert(0, file_path)

def save_file(entry_widget):
    file_path = filedialog.asksaveasfilename(defaultextension=".csv")  # Save as CSV for lower memory usage
    entry_widget.delete(0, tk.END)
    entry_widget.insert(0, file_path)

# Main function to initialize the Tkinter app
def main():
    root = tk.Tk()
    root.title("Feed and CDR Merger")

    tk.Label(root, text="Select Toronto Feed File:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    toronto_entry = tk.Entry(root, width=50)
    toronto_entry.grid(row=0, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(toronto_entry)).grid(row=0, column=2, padx=10, pady=5)

    tk.Label(root, text="Select Sydney Feed File:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    sydney_entry = tk.Entry(root, width=50)
    sydney_entry.grid(row=1, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(sydney_entry)).grid(row=1, column=2, padx=10, pady=5)

    tk.Label(root, text="Select London Feed File:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
    london_entry = tk.Entry(root, width=50)
    london_entry.grid(row=2, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(london_entry)).grid(row=2, column=2, padx=10, pady=5)

    tk.Label(root, text="Select CDR File:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
    cdr_entry = tk.Entry(root, width=50)
    cdr_entry.grid(row=3, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: select_file(cdr_entry)).grid(row=3, column=2, padx=10, pady=5)

    tk.Label(root, text="Save Merged Output As:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
    output_entry = tk.Entry(root, width=50)
    output_entry.grid(row=4, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: save_file(output_entry)).grid(row=4, column=2, padx=10, pady=5)

    # Run the merge when the button is clicked
    tk.Button(root, text="Merge Files", command=lambda: run_merge_and_save(
        toronto_entry.get(),
        sydney_entry.get(),
        london_entry.get(),
        cdr_entry.get(),
        output_entry.get()
    )).grid(row=5, column=0, columnspan=3, pady=20)

    root.mainloop()

# Run the application
if __name__ == "__main__":
    main()
